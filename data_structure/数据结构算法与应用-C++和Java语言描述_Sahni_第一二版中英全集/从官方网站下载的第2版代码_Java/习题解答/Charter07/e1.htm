
<HTML>
<HEAD>
<LINK rel="stylesheet" href="../exer.css">
</HEAD>
<BODY>
<H1>
Data Structures, Algorithms, & Applications in C++<BR>
Chapter 7, Exercise 1<BR>
<BR>
</H1>
The selection sort code for simulated chains is very similar to Program 2.7.
It is given below and
in the file <code class=code>SimulatedChainWithSelectionSort.java</code>.
</dl>
<HR class = coderule>
<PRE class = code>
public class SimulatedChainWithSelectionSort extends SimulatedChain
{
   /** sort the chain using the selection sort method */
   public void selectionSort()
   {
      for (int i = size; i &gt; 1; i--)
      {
         // find max object from first i nodes
         Comparable currentMax = (Comparable) S.node[firstNode].element;
         int maxNode = firstNode;
         int currentNode = firstNode;
         for (int j = 1; j &lt; i; j++)
         {
            int nextNode = S.node[currentNode].next;
            if (currentMax.compareTo(S.node[nextNode].element) &lt; 0)
            {// found a larger element
               currentMax = (Comparable) S.node[nextNode].element;
               maxNode = nextNode;
            }

            // move to next node
            currentNode = nextNode;
         }

         // move max object to right end
         S.node[maxNode].element = S.node[currentNode].element;
         S.node[currentNode].element = currentMax;
      }
   }
}
<HR class = coderule>
</pre>
<br><br>
Each selection pass takes
<code class=math>Theta(i)</code> time, where <code class=math>i</code> is
the number of nodes on the
portion of the chain that is not known to be sorted.
For an <code class=math>n</code>
node input chain, the time needed is
<code class=math>Theta(n<sup>2</sup>)</code>.


</FONT>
</BODY>
</HTML>
