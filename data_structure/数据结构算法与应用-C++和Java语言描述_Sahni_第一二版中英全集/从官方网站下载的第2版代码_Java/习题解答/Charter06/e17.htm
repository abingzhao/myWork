
<HTML>
<HEAD>
<LINK rel="stylesheet" href="../exer.css">
</HEAD>
<BODY>
<H1>
Data Structures, Algorithms, & Applications in Java<BR>
Chapter 6, Exercise 17<BR>
<BR>
</H1>
<DL Compact>
<DT> (a)
<DD>
The code to split a chain is given below.
</dl>
<HR class = coderule>
<PRE class = code>
public class SplitExtendedChain
{
   /** split a into b and c */
   public static void split(ExtendedChain a, ExtendedChain b,
                            ExtendedChain c)
   {
      // first empty out b and c
      b.clear();
      c.clear();
   
      // assign elements of a alternately to b and c using an
      // iterator ia for a
      Iterator ia = a.iterator();
      while (ia.hasNext())
      {
         // first give b an element
         b.add(ia.next());
         if (!ia.hasNext()) break;

         // now give c an element
         c.add(ia.next());
      }
   }
}
</pre>
<HR class=coderule><BR><br>
<br><br>
<dl compact>
<dt> (b)
<dd>
The time needed to empty the lists <code class=code>b</code>
and <code class=code>c</code> is <code class=math>Theta(1)</code>.
Each <code class=var>add</code> takes <code class=var>Theta(1)</code> time
because the new element is added at the end of the list.
The <code class=code>while</code> loop iterates
at most
<code class=var>ceil(a.size / 2)</code> times.  This loop
may terminate earlier because it is possible for
<code class=code>add</code> to fail for lack
of memory.  So, the
complexity is <code class=math>O(a.size)</code>.
<br><br>
<dt> (c)
<dd>
The test program and output are in the files <code class=code>SplitExtendedChain.*</code>.
</dl>

</FONT>
</BODY>
</HTML>
