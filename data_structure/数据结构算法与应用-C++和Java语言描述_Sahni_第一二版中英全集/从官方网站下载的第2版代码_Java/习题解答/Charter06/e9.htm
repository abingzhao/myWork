
<HTML>
<HEAD>
<LINK rel="stylesheet" href="../exer.css">
</HEAD>
<BODY>
<H1>
Data Structures, Algorithms, & Applications in Java<BR>
Chapter 6, Exercise 9<BR>
<BR>
</H1>
The code for <code class=code>fromList</code> is
<HR class = coderule>
<PRE class = code>
/** convert f into its chain representation */
public void fromList(ArrayLinearList f)
{
   // first make this empty
   firstNode = null;
   ChainNode lastNode = null;
   
   // copy elements from f
   int len = f.size();
   for (int i = 0; i &lt; len; i++)
   {
      // create a node for the next element
      ChainNode node = new ChainNode(f.get(i));

      // put this node into the chain
      if (firstNode == null)  // chain is empty
         firstNode = node;
      else // chain is not empty
         lastNode.next = node;

      lastNode = node;
   }

   // set next field of last node
   if (lastNode != null)
      lastNode.next = null;
}
</pre>
<hr class=coderule>
<br><br>
Each iteration of the <code class=code>for</code> loop takes
<code class=math>Theta(1)</code> time. The loop is iterated
<code class=math>O(f.size)</code> time (note that fewer than
<code class=code>f.size</code> iterations may be made
if we do not have adequate memory to create the needed nodes).
Therefore, the overall complexity of <code class=code>fromList</code>
is <code class=math>O(f.size)</code>.

<br><br>
The code for <code class=code>toList</code> is
<hr class=coderule>
<pre class=code>
/** convert this into its array-based representation f */
public void toList(ArrayLinearList f)
{
   // first make f empty
   int len = f.size() - 1;
   for (int i = len; i &gt;= 0; i--)
      f.remove(i);

   // copy from this
   ChainNode current = firstNode;
   int i = 0;       // index of current element
   while (current != null)
   {// copy current element
      f.add(i, current.element);
      current = current.next;  // move to next node
      i++;
   }
}
</pre>
<HR class = coderule>

Each iteration of the
<code class=code>for</code> loop
and each iteration of the
<code class=code>while</code> loop
takes <code class=math>Theta(1)</code> time.
The overall complexity is, therefore,
<code class=math>O(f.size + this.size)</code>, where
<code class=code>f.size</code> is the size of <code class=code>f</code>
at the time <code class=code>toList</code> is invoked.

<br><br>
Sample test data and output can be found in the files
<code class=code>dataStructures.ChainWithConvert.*</code>.

</FONT>
</BODY>
</HTML>
