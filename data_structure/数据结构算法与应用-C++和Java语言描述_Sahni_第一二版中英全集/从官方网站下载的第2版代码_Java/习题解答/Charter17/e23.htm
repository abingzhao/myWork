
<HTML>
<HEAD>
<LINK rel="stylesheet" href="../exer.css">
</HEAD>
<BODY>
<H1>
Data Structures, Algorithms, & Applications in Java<BR>
Chapter 17, Exercise 23<BR>
<BR>
</H1>

Assume that the adjacency matrix of an
<code class=var>n</em> vertex digraph is stored in the
boolean matrix
<code class=var>a[n + 1][n + 1]</em> with
<code class=var>A(i,j)</em> stored in
<code class=var>a[i][j]</em>.
The number of edges is the number of array entries that have the value
<code class=var>true</code>.
<br><br>
The code is given below.
A test program and output appear
in the file <code class=code>NumberOfEdges.*</code>.

<HR class = coderule>
<pre class = code>
public int numberOfEdges()
{
   int count = 0;      // default initial value is 0
   for (int i = 1; i &lt; a.length; i++)
      for (int j = 1; j &lt; a.length; j++)
         if (a[i][j])
            // directed edge (i,j) exists
            count++;

   return count;
}
<hr class=coderule>
</pre>
<br><br>

The
<code class=code>if</code> statement
in <code class=code>numberOfEdges</code> is
executed <code class=code>n<sup>2</sup></code> times and no statement
has a greater total cost.
Therefore, the complexity of
<code class=code>numberOfEdges</code> is
<code class=code>O(n<sup>2</sup>)</code>.

</FONT>
</BODY>
</HTML>
