<HTML>
<HEAD>
<LINK rel="stylesheet" href="../exer.css">
</HEAD>
<BODY>
<H1>
Data Structures, Algorithms, & Applications in Java<BR>
Chapter 17, Exercise 39<BR>
<BR>
</H1>

We follow the derivation hierarchy used in the text for the
linked adjacency list classes and derive the class
<code class=var>ArrayWDigraph</code>,
from the class <code class=var>ArrayDigraph</code> that
was developed in Exercise 35.
The code is given below.
Changes from the code for <code class=var>LinkedWDigraph</code>
are shown in <font color=red>red</font>.
<br><br>


<HR class = coderule>
<pre class = code>
public class <font color=red>ArrayWDigraph extends ArrayDigraph</font>
{
   // constructors
   public <font color=red>ArrayWDigraph</font>(int theVertices)
      {super(theVertices);}
   
   // default is a 0 vertex graph
   public <font color=red>ArrayWDigraph</font>()
      {this(0);}
   
   /** put theEdge into the digraph 
     * @throws IllegalArgumentException when
     * theEdge is invalid */
   public void putEdge(Object theEdge)
   {
      WeightedEdge edge =  (WeightedEdge) theEdge;
      int v1 = edge.vertex1;
      int v2 = edge.vertex2;
      if (v1 &lt; 1 || v2 &lt; 1 || v1 &gt; n || v2 &gt; n || v1 == v2)
         throw new IllegalArgumentException
               ("(" + v1 + "," + v2 + ") is not a permissible edge");

      int index = aList[v1].indexOf(new EdgeNode(v2));
      if (index == -1)  // new edge
      {
         <font color=red>// put v2 at end of aList[v1]
         aList[v1].add(aList[v1].size(),
                       new WeightedEdgeNode(v2, edge.weight));</font>
         e++;
      }
      else
      {// update edge weight
         WeightedEdgeNode e = (WeightedEdgeNode) aList[v1].get(index);
         e.weight = edge.weight;
      }
   }
}
<HR class = coderule>
</pre>

</FONT>
</BODY>
</HTML>
