


<HTML>
<HEAD>
<LINK rel="stylesheet" href="../exer.css">
</HEAD>
<BODY>
<H1>
Data Structures, Algorithms, & Applications in Java<BR>
Chapter 12, Exercise 39<BR>
<BR>
</H1>
We make the same assumptions as made in Exercise 37.
The conversion is done by first constructing the binary tree form of the
expression as in Exercise 37 and then performing an inorder traversal.

<br><br>
The code is given below.
<br>
<HR class = coderule>
<pre class = code>
public class ConvertPrefixToInfix
{
   static StringBuffer infixForm;

   public static String convertPrefixToInfix(String expression)
   {
      infixForm = new StringBuffer();

      // creates a binary tree from the prefix expression 
      BinaryTreeNode root = 
                      PrefixToBinaryTree.prefixToBinaryTree(expression);
      
      // fully-parenthesised inorder traversal of the treee
      inOrder(root);

      return (infixForm.toString());
   }  

   // performs a fully-parenthesised inorder traversal of the tree
   public static void inOrder(BinaryTreeNode t)
   {
      if (t != null)
      {
         // left child
         infixForm.append("(");
         inOrder(t.leftChild);         

         // visit current node
         infixForm.append((String)t.element);
            
         // right child
         inOrder(t.rightChild);
         infixForm.append(")");
      }    
   }    
}
<hr class=coderule>
</pre>



</FONT>
</BODY>
</HTML>
