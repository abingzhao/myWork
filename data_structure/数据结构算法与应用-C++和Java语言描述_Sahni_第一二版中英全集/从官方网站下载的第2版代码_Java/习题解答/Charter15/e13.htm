
<HTML>
<HEAD>
<LINK rel="stylesheet" href="../exer.css">
</HEAD>
<BODY>
<H1>
Data Structures, Algorithms, & Applications in Java<BR>
Chapter 15, Exercise 13<BR>
<BR>
</H1>


First we must develop a method to randomly permute
an array of elements.  The random permutation can be
obtained by considering the elements in the array from right to left.
When the element in array position <code class=var>i</code> is considered
we generate a random number in the range <code class=var>0</code>
through <code class=var>i</code>.
Let the generated random number be <code class=var>j</code>.
The elements at <code class=var>i</code> and <code class=var>j</code>
are swapped.  The code is given below.

<HR class = coderule>
<pre class = code>
public class Permute
{
   /** permute a[0:a.length-1] */
   public static void permute(Object [] a)
   {
      Random rand = new Random();
      for (int i = a.length - 1; i &gt; 0; i--)
         // swap a[i] with a randomly selected element from a[0:i]
         MyMath.swap(a, i, Math.abs(rand.nextInt()) % (i + 1));
   }
}
<hr class=coderule>
</pre>
<br><br>
The program to insert the elements into the binary search
tree and then measure the tree height is given below.

<HR class = coderule>
<pre class = code>
public class BinarySearchTreeHeight
{
   public static void main(String [] args)
   {
      // values for n, number of nodes in tree
      int [] size = {100, 500, 1000, 10000, 20000, 50000};
      int numOfTests = 6;
      int repeats = 10;
      int heightSum;
   
      for (int i = 0; i &lt; numOfTests; i++)
      {// measure average height for size[i] elements
         heightSum = 0;
         Integer [] element = new Integer [size[i]];
         // generate size[i] elements to insert
         for (int j = 0; j &lt; size[i]; j++)
            element[j] = new Integer(j);
           
         for (int r = 0; r &lt; repeats; r++)
         {
            // randomly permute the elements
            Permute.permute(element);
         
            // create a binary search tree
            BinarySearchTree tree = new BinarySearchTree();
            // insert elements
            for (int j = 0; j &lt; size[i]; j++)
               tree.put(element[j], element[j]);

            // add in its height
            heightSum += tree.height();
         }
      
         // output average tree height
         System.out.println("Number of nodes is " + size[i] +
              " Average height is " + heightSum / repeats);
      }
   }
}
<hr class=coderule>
</pre>
<br><br>
The average heights output by this program for
<code class=var>n = 100, 500, 1000, 10000</code>, and <code class=var>50000</code> are
<code class=var>13, 19, 21, 31, 33</code>, and <code class=var>37</code>,
respectively.  The corresponding
values of <code class=var>2*ceil(log<sub>2</sub>(n+1))</code>
are <code class=var>14, 18, 20, 28, 30</code>, and <code class=var>32</code>.
The two sets of numbers are close.

</FONT>
</BODY>
</HTML>
