
<HTML>
<HEAD>
<LINK rel="stylesheet" href="../exer.css">
</HEAD>
<BODY>
<H1>
Data Structures, Algorithms, & Applications in Java<BR>
Chapter 5, Exercise 29<BR>
<BR>
</H1>
<DL Compact>
<DT> (a)
<DD>
The method <code class=code>dataStructures.ArrayCircularListWithReverse</code>,
which reverses a list represented using Equation 3.3, is given below.
</dl>
<HR class = coderule>
<PRE class = code>
/** reverse the linear list */
public void reverse()
{
   int size = size();
   for (int i = 0; i &lt; size / 2; i++)
       MyMath.swap(element, (first + i) % element.length,
                  (element.length + last - i) % element.length);
}
</pre>
<HR class=coderule><BR>
<dl compact>
<dt> (b)
<dd>
The complexity of the method is <code class=code>Theta(size)</code>.
<dt> (c)
<dd>
A sample test program is given as the mathod
<code class=code>ArrayCircularListWithReverse.main</code>.
For completeness, we could also test using an empty list and
one of length one.
<dt> (d)
<dd>
The code is given below.
</DL>
<HR class = coderule>
<PRE class = code>
public class ReverseArrayCircularList
{
   public static void reverse(ArrayCircularList x)
   {
      int sizeMinus1 = x.size() - 1;
      for (int i = 0; i &lt; sizeMinus1; i++)
      {
         // retrieve and remove last element
         Object y = x.remove(sizeMinus1);

         // insert at proper place
         x.add(i, y);
      }
   }
}
</pre>
<HR class=coderule><BR>
<DL Compact>
<DT> (e)
<DD>
Each invocation of <code class=code>remove</code>
takes <code class=var>Theta(1)</code> time (as the element is removed
from the right end
of the list).  The complexity of
<code class=code>add(y, i)</code> is
<code class=var>Theta(min{i, size - i})</code>.
So, the time needed to perform all the inserts
is <code class=var>Theta(size<sup>2</sup>)</code>.
This is also the overall complexity of the method
<code class=code>reverse</code>.
</dl>


</FONT>
</BODY>
</HTML>
