<HTML>
<HEAD>
<LINK rel="stylesheet" href="../exer.css">
</HEAD>
<BODY>
<H1>
Data Structures, Algorithms, & Applications in Java<BR>
Chapter 8, Exercise 27<BR>
<BR>
</H1>
<dl compact>
<dt> (a)
<dd>
One way to map an upper triangular matrix into a one dimensional array
is by columns beginning with column one of the upper triangle.
The order of elements is <code class=math>(1,1), (1,2), (2,2), (1,3), (2,3), (3,3),</code> ....
Preceding the column <code class=math>j</code> elements, we have one element from column <code class=math>1</code>,
two from column <code class=math>2</code>, three form column <code class=math>3</code>, ..., and
<code class=math>j-1</code> from column <code class=math>j</code>.  So, in this mapping, element <code class=math>(i,j)</code> is the
<code class=math>j(j-1)/2+i</code>th element.  Hence, it is stored in array position
<code class=math>j(j-1)/2+i-1</code>.

With these observations in mind, we arrive at the following
code:
<HR class = coderule>
<PRE class = code>
public class UpperTriangularMatrix
{
   // data members
   int rows;            // matrix dimension
   Object zero;         // zero element
   Object [] element;   // element array

   // constructor
   public UpperTriangularMatrix(int theRows, Object theZero)
   {
      // validate theRows
      if (theRows &lt; 1)
         throw new IllegalArgumentException
               ("number of rows must be &gt; 0");
   
      // create and initialize the matrix
      rows = theRows;
      zero = theZero;
      element = new Object [rows * (rows + 1) / 2];
      for (int i = 0; i &lt;  rows * (rows + 1) / 2; i++)
         element[i] = zero;
   }
   
   /** throws IndexOutOfBoundsException when i &lt; 1
     * or j &lt; 1 or i &gt; rows or j &gt; rows */
   void checkIndex(int i, int j)
   {
      if (i &lt; 1 || j &lt; 1 || i &gt; rows || j &gt; rows)
         throw new IndexOutOfBoundsException
                   ("i = " + i + " j = " + j +
                    " rows = " + rows + " cols = " + rows);
   }
   
   // methods
   /** return the element this(i,j)
     * throws IndexOutOfBoundsException when i or j invalid */
   public Object get(int i, int j)
   {
      checkIndex(i, j);

      // (i,j) in upper triangle iff i <= j
      if (i <= j) return element[j * (j - 1) / 2 + i - 1];
      else return zero;
   }
   
   /** set this(i,j) = newValue
     * throws IndexOutOfBoundsException when i or j invalid */
   public void set(int i, int j, Object newValue)
   {
      checkIndex(i, j);

      // store newValue
      // (i,j) in upper triangle iff i <= j
      if (i <= j) element[j * (j - 1) / 2 + i - 1] = newValue;
      else if (!((Zero) newValue).equalsZero())
              throw new IllegalArgumentException
                    ("elements not in upper triangle must be zero");
   }
}
</pre>
<HR class=coderule><BR><br>
<dt> (b)
<dd>
The test program, input, and output are in the files <code class=code>UpperTriangularMatrix.*</code>.
<br><br>
<dt> (c)
<dd>
The complexity of the
store and retrieve methods
is <code class=math>Theta(1)</code>.  The complexity of the
constructor is <code class=math>Theta(rows<sup>2</sup>)</code>.

</FONT>
</BODY>
</HTML>
