<HTML>
<HEAD>
<LINK rel="stylesheet" href="../exer.css">
</HEAD>
<BODY>
<H1>
Data Structures, Algorithms, & Applications in Java<BR>
Chapter 8, Exercise 23<BR>
<BR>
</H1>
<dl compact>
<dt> (a)
<dd>
When a triadiagonal matrix is stored by rows in a one-dimensional
array <code class=code>element</code>, the mapping is <code class=code>element[0:3n-3] = [M(1,1), M(1,2),
M(2,1), M(2,2), M(2,3), M(3,2), M(3,3), M(3,4), M(4,3), ...]</code>.
If <code class=code>|i-j| &gt; 1</code>, then <code class=code>M(i,j)</code> is not on the tridiagonal.
For elements in the tridiagonal, we see that the row <code class=code>1</code> elements
are stored in <code class=code>element[0]</code> and <code class=code>element[1]</code>.  So, when
<code class=code>i = 1</code>, <code class=code>M(i,j)</code> is at <code class=code>element[j-1]</code>.
When <code class=code>i &gt; 1</code>, there are <code class=code>i-1</code> rows that come
before the first element of row <code class=code>i</code>.  These <code class=code>i-1</code> rows
contain <code class=code>3(i-1)-1</code> elements.  Within row <code class=code>i</code>,
<code class=code>M(i,j)</code> is the <code class=code>(j-i+2)</code>th element.  So, if <code class=code>i &gt; 1</code>, <code class=code>M(i,j)</code> is at
<code class=code>element[j+2i-3]</code>.
When <code class=code>i = 1</code>, <code class=code>j+2i-3 = j-1</code>.  So, this formula
may also be used for the case <code class=code>i = 1</code>.

Note also that the lower diagonal is stored in positions <code class=code>2</code>, <code class=code>5</code>, <code class=code>8</code>, ...
of the one-dimensional array; the main diagonal occupies positions
<code class=code>0</code>, <code class=code>3</code>, <code class=code>6</code>, ...; and the upper diagonal ocupies positions
<code class=code>1</code>, <code class=code>4</code>, <code class=code>7</code>, ....

With these observations in mind, we arrive at the following
code:
<HR class = coderule>
<PRE class = code>
public class TridiagonalByRows
{
   // data members
   int rows;            // matrix dimension
   Object zero;         // zero element
   Object [] element;   // element array

   // constructor
   public TridiagonalByRows(int theRows, Object theZero)
   {
      // validate theRows
      if (theRows &lt; 1)
         throw new IllegalArgumentException
                   ("number of rows must be &gt; 0");
   
      // create and initialize the matrix
      rows = theRows;
      zero = theZero;
      element = new Object [3 * rows - 2];
      for (int i = 0; i &lt; 3 * rows - 2; i++)
         element[i] = zero;
   }
   
   // methods
   /** create string suitable for output */
   public String toString()
   {
      StringBuffer s = new StringBuffer(); 
   
      s.append("Lower diagonal is \n");
      for (int i = 2; i &lt; 3 * rows - 2; i += 3)
         s.append(element[i] + "  ");
      s.append("\n");
   
      s.append("Main diagonal is \n");
      for (int i = 0; i &lt; 3 * rows - 2; i += 3)
         s.append(element[i] + "  ");
      s.append("\n");
   
      s.append("Upper diagonal is \n");
      for (int i = 1; i &lt; 3 * rows - 2; i += 3)
         s.append(element[i] + "  ");
      s.append("\n");
   
      // create equivalent String
      return new String(s);
   }
   
   /** input a tridiagonal matrix from the given input stream */
   public void input(Object theZero, MyInputStream inStream)
   {
      Method inputMethod;
      Object [] inputMethodArgs = {inStream};
      Class [] parameterTypes = {inStream.getClass()};
      zero = theZero;
      try
      {
         // get the proper method to be used to read in the values
         inputMethod = theZero.getClass().
                          getMethod("input", parameterTypes);
   
         // input number of rows in the matrix
         System.out.println("Enter number of rows");
         rows = inStream.readInteger();
         // validate input
         if (rows &lt; 1)
            throw new IllegalArgumentException
                  ("number of rows must be &gt; 0");
      
         // create the element array
         element = new Object [3 * rows - 2];
   
         // input elements
         System.out.println("Enter lower diagonal");
         for (int i = 2; i &lt; 3 * rows - 2; i += 3)
            element[i] = inputMethod.invoke(null, inputMethodArgs);
   
         System.out.println("Enter main diagonal");
         for (int i = 0; i &lt; 3 * rows - 2; i += 3)
            element[i] = inputMethod.invoke(null, inputMethodArgs);
   
         System.out.println("Enter upper diagonal");
         for (int i = 1; i &lt; 3 * rows - 2; i += 3)
            element[i] = inputMethod.invoke(null, inputMethodArgs);
      }
      catch (Exception e)
      {
         System.out.println(e);
         throw new IllegalArgumentException
               ("matrix element type "
                + "must have the static method input() defined");
      }
   }
   
   /** throws IndexOutOfBoundsException when i &lt; 1
     * or j &lt; 1 or i &gt; rows or j &gt; rows */
   void checkIndex(int i, int j)
   {
      if (i &lt; 1 || j &lt; 1 || i &gt; rows || j &gt; rows)
         throw new IndexOutOfBoundsException
                   ("i = " + i + " j = " + j +
                    " rows = " + rows + " cols = " + rows);
   }
 
   /** return the element this(i,j)
     * throws IndexOutOfBoundsException when i or j invalid */
   public Object get(int i, int j)
   {
      checkIndex(i, j);

      // determine element to return
      switch (i - j)
      {
         case 1: case 0: case -1: // in tridiagonal
               return element[2 * i + j - 3];
         default: return zero;
      }
   }
   
   /** set this(i,j) = newValue
     * throws IndexOutOfBoundsException when i or j invalid */
   public void set(int i, int j, Object newValue)
   {
      checkIndex(i, j);

      // store newValue
      switch (i - j)
      {
         case 1: case 0: case -1: // in tridiagonal
               element[2 * i + j - 3] = newValue;
               break;
         default: if (!((Zero) newValue).equalsZero())
                      throw new IllegalArgumentException
                            ("elements not on tridiagonal must be zero");
      }
   }

   /** return this + b */
   public TridiagonalByRows add(TridiagonalByRows b)
   {
      if (rows != b.rows)
         throw new IllegalArgumentException
                   ("Matrices must have same dimensions");
   
      // create result array w
      TridiagonalByRows w = new TridiagonalByRows(rows, zero);
      for (int i = 0; i &lt; 3 * rows - 2; i++)
          w.element[i] = ((Computable) element[i]).add(b.element[i]);
   
      return w;
   }
   
   /** return this - b */
   public TridiagonalByRows subtract(TridiagonalByRows b)
   {
      if (rows != b.rows)
         throw new IllegalArgumentException
                   ("Matrices must have same dimensions");
   
      // create result array w
      TridiagonalByRows w = new TridiagonalByRows(rows, zero);
      for (int i = 0; i &lt; 3 * rows - 2; i++)
          w.element[i] = ((Computable) element[i]).subtract(b.element[i]);
   
      return w;
   }
   
   /** return the transpose of this */
   public TridiagonalByRows transpose()
   {
   
      // create result array w
      TridiagonalByRows w = new TridiagonalByRows(rows, zero);
   
      // copy lower diagonal of this to upper diagonal of w and copy
      // the upper diagonal of this to lower diagonal of w
      for (int i = 1; i &lt; 3 * rows - 2; i += 3)
      {
          w.element[i] = element[i + 1];
          w.element[i + 1] = element[i];
       }

      // copy main diagonal of this to main diagonal of w
      for (int i = 0; i &lt; 3 * rows - 2; i += 3)
          w.element[i] = element[i];
   
      return w;
   }
}
</pre>
<HR class=coderule><BR><br>
<dt> (b)
<dd>
The test program, input, and output are in the files <code class=code>TridiagonalByRows.*</code>.
<br><br>
<dt> (c)
<dd>
The complexity of the
store and retrieve methods
is <code class=math>Theta(1)</code>.  The complexity of the
remaining methods is <code class=math>Theta(rows)</code>.

</FONT>
</BODY>
</HTML>
