


<HTML>
<HEAD>
<LINK rel="stylesheet" href="../exer.css">
</HEAD>
<BODY>
<H1>
Data Structures, Algorithms, & Applications in Java<BR>
Chapter 8, Exercise 31<BR>
<BR>
</H1>
<dl compact>
The general forumla to compute the product <code class=code>c</code>
of two <code class=var>n x n</code> matrices
<code class=var>a</code>
and
<code class=var>b</code> is
<br>
<code class=var>c(i,j) = sum (k=1 to n) (a(i,k) * b(k,j))</code>
<br><br>
Since
<code class=var>a</code>
and
<code class=var>b</code> are lower triangular matrices,
<code class=var>a(i,j) = 0</code>
and
<code class=var>b(i,j) = 0</code> for
<code class=var>i &lt; j</code>. Using this knowledge in the
formula for
<code class=var>c(i,j)</code>, we see that
when
<code class=var>i &lt; j</code>,
if <code class=var>k &gt; i</code>, 
<code class=var>a(i,k) = 0</code>; and
if <code class=var>k &lt;= i</code>, 
then <code class=var>k &lt; j</code> and 
so
<code class=var>b(k,j) = 0</code>.  Therefore,
<code class=var>c(i,j) = 0</code>.  Hence, the product of
two lower-triangular matrices is also a lower-triangular matrix.
<br><br>
If we eliminate terms in the matrix product formula that involve
an element in the upper triangle of
<code class=var>a</code>
or
<code class=var>b</code>, the formula becomes
<br>
<code class=var>c(i,j) = sum (k=i to j) (a(i,k) * b(k,j))</code>
<br><br>
The preceding development results in the code that is given below.
The complexity of is
<code class=var>O(rows<sup>3</sup>)</code>.
<HR class = coderule>
<PRE class = code>
public class LowerTriangularMatrixWithMultiply extends LowerTriangularMatrix
{
   public LowerTriangularMatrixWithMultiply(int theRows, Object theZero)
      {super(theRows, theZero);}
   
   /** return the this * b */
   public LowerTriangularMatrixWithMultiply multiply
                         (LowerTriangularMatrixWithMultiply b)
   {
     if (rows != b.rows)
        throw new IllegalArgumentException
                  ("Matrices must have same dimensions");
  
     // create result array w
     LowerTriangularMatrixWithMultiply w =
                    new LowerTriangularMatrixWithMultiply(rows, zero);

     for (int i = 1; i <= rows; i++)
        for (int j = 1; j <= i; j++)
        {// compute w(i,j)
           // compute this(i,j) * b(j,j)
           Computable sum = (Computable)
                            ((Computable) element[i * (i - 1) / 2 + j - 1]).
                            multiply(b.element[j * (j - 1) / 2 + j - 1]);
           // add in remaining terms
           for (int k = j + 1; k <= i; k++)
              sum.increment(((Computable) element[i * (i - 1) / 2 + k - 1]).
                            multiply(b.element[k * (k - 1) / 2 + j - 1]));

           // save as w(i,j)
           w.element[i * (i - 1) / 2 + j - 1] = sum;
      }
  
     return w;
   }
}
</pre>
<HR class=coderule><BR><br>

We can improve the run time slightly by avoiding the recomputation
of <code class=code>i*(i-1)/2 - 1</code>
and <code class=code>j - 1</code> inside the innermost
<code class=code>for</code> loop.

</FONT>
</BODY>
</HTML>
