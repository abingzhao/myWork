<HTML>
<HEAD>
<LINK rel="stylesheet" href="../exer.css">
</HEAD>
<BODY>
<H1>
Data Structures, Algorithms, & Applications in Java<BR>
Chapter 8, Exercise 29<BR>
<BR>
</H1>
Since the class <code class=code>UpperTriangularMatrix</code> of Exercise 27 stores an
upper-triangular matrix by columns and the class <code class=code>LowerTriangularMatrix</code>
of the text stores the matrix by rows, the transpose operation can
be done by just copying the nonzero elements as below:
<HR class = coderule>
<PRE class = code>
public class ExtendedLowerTriangularMatrix extends LowerTriangularMatrix
{
   // constructor
   public ExtendedLowerTriangularMatrix(int theRows, Object theZero)
      {super(theRows, theZero);}

   /** return the transpose of this */
   public UpperTriangularMatrix transpose()
   {
      // create result matrix
      UpperTriangularMatrix u = new UpperTriangularMatrix(rows, zero);

      // form the transpose
      for (int i = 0; i &lt; rows * (rows + 1) / 2; i++)
         u.element[i] = element[i];
   
      return u;
   }
}
</pre>
<HR class=coderule><BR><br>

The time complexity of transpose is <code class=code>Theta(rows<sup>2</sup>)</code>
as <code class=code>rows(rows+1)/2</code> elements are copied.
<br><r>
The test program and output are in the files <code class=code>ExtendedLowerTriangularMatrix.*.

</FONT>
</BODY>
</HTML>
