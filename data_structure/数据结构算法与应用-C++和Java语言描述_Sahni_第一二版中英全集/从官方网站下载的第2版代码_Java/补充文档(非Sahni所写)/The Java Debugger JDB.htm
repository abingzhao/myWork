<HTML>
<HEAD>
<LINK rel="stylesheet" href="../exer.css">
</HEAD>
<BODY>
<H1>
Data Structures, Algorithms, & Applications in Java<BR>
The Java Debugger JDB<br>
Copyright 1999  Sartaj Sahni<br>
<BR>
</H1>

<a href = "#intro">Introduction</a>
<br>
<a href = "#commands">Some JDB Commands</a>
<br>
<a href = "#example">An Example</a>
<br><br>
<a name = "intro"></a>
<font color=blue><big><big>Introduction</big></big></font><br>

Computer assisted program tracing is a common approach to debugging
a program. In this approach, we execute portions of the code and examine the
values of certain variables.
A rather painful way to trace through
your program is to manually introduce a whole bunch of
statements that will print the values of variables you want to monitor,
run the modified program, study the output, fix the detected bugs,
rerun the program,
detect new bugs,
introduce more print statements,
and so on.
When you are satisifed that your program runs properly, the
debugging statements you introduced are removed and the program rerun
to ensure that you did not remove statements that were not to be removed.

<br><br>
The task of debugging is greatly simplified when you use a debugger such
as
<code class=code>jdb</code> which comes with the Java Development Kit (JDK).
This debugger lets you step through your program, printing the
values of any variables you may be interested in, without making any change
to the source code.
Some of the <code class=code>jdb</code> commands you will
find useful when debugging programs in this book are described below.

<br><br>
<a name = "commands"></a>
<font color=blue><big><big>Some jdb Commands</big></big></font><br>
Here are some useful degugging commands. For a complete list of commands,
consult your Java documentation.

<dl>
<br><br><dt><code class=code>catch</code>
<dd>
list the exceptions that are being caught
<br><br><dt><code class=code>catch ExceptionClassName</code>
<dd>
suspend execution whenever an exception of type <code class=code>ExceptionClassName</code>
is thrown; treats exceptions of this type as breakpoints
<br><br><dt><code class=code>clear</code>
<dd>
list all breakpoints and their line numbers
<br><br><dt><code class=code>clear TheClassName:theLine</code>
<dd>
remove the breakpoint at line <code class=code>theLine</code> of the class <code class=code>TheClassName</code>
<br><br><dt><code class=code>cont</code>
<dd>
continue execution from current breakpoint; suspend when next breakpoint is
reached or when program terminates
<br><br><dt><code class=code>exit</code>
<dd>
terminate the <code class=code>jdb</code> session
<br><br><dt><code class=code>help</code>
<dd>
list all <code class=code>jdb</code> commands
<br><br><dt><code class=code>ignore ExceptionClassName</code>
<dd>
do not suspend execution when an exception of type <code class=code>ExceptionClassName</code>
is thrown;  opposite of <code class=code>catch</code>
<br><br><dt><code class=code>list</code>
<dd>
list from 4 lines before the current source code line to 4 lines after
<br><br><dt><code class=code>list theLineNumber</code>
<dd>
list the source code beginning at line number <code class=code>theLineNumber - 4</code>
to <code class=code>theLineNumber + 4</code>
<br><br><dt><code class=code>locals</code>
<dd>
list the value of each local variable
<br><br><dt><code class=code>methods theClassName</code>
<dd>
list all methods of the class <code class=code>theClassName</code>
<br><br><dt><code class=code>print theObject1 theObject2 ...</code>
<dd>
print the value of each of the objects  <code class=code>theObject1</code>, <code class=code>theObject2</code>, ...
<br><br><dt><code class=code>quit</code>
<dd>
terminate the <code class=code>jdb</code> session; same as <code class=code>exit</code>
<br><br><dt><code class=code>run</code>
<dd>
begin execution of the <code class=code>main</code> method of the class specified in the
<code class=code>jdb</code> command line; suspend when a breakpoint is reached
<br><br><dt><code class=code>step</code>
<dd>
execute the current line of the source code and suspend execution
<br><br><dt><code class=code>stop</code>
<dd>
list all breakpoints; same as <code class=code>clear</code>
<br><br>
<dt><code class=code>stop at TheClassName:theLineNumber</code>
<dd>
set a breakpoint at line <code class=code>theLineNumber</code> of the
class <code class=code>TheClassName</code>
<br><br><dt><code class=code>stop in TheClassName.theMethodName</code>
<dd>
set a breakpoint at the first executable line of <code class=code>TheClassName.theMethodName</code>
<br><br><dt><code class=code>where</code>
<dd>
list invocation sequence used to get to current line
</dl>
<br><br>

<a name = "example"></a>
<font color=blue><big><big>An Example</big></big></font><br>
We illustrate the basic capabilities of <code class=code>jdb</code>
using Program 1.28 (output the roots of
a quadratic equation) as an example. Suppose that the first line of
<code class=code>QuadraticRoots.main</code> is

<br><br><code class=code>
outputRoots(1, -5, 6);
</code><br><br>

To use the full capability of <code class=code>jdb</code>, you should compile your
program using the <code class=code>-g</code> (include all debugging information) option,
as shown below.

<br><br><code class=code>
javac -g applications\QuadraticRoots.java
</code><br><br>

A sample <code class=code>jdb</code> debug session is shown below.
The line numbers <code class=code>1-40</code> shown in the first two
columns of each line have been added by us;
these numbers are not part of the display
you will see during a <code class=code>jdb</code>
session.
In the shown session <code class=code>c:\codes</code> is a DOS prompt; and
<code class=code>></code> and <code class=code>main[1]</code> are <code class=code>jdb</code> prompts.
Line 1 invokes the debugger; lines 2 and 3 are responses from <code class=code>jdb</code>;
in line 4, we ask that a breakpoint (i.e., a point where the execution of
our program is to be suspended) be set at the first line of the
method <code class=code>outputRoots</code>; line 5 is a response from <code class=code>jdb</code>.
In line 6, we instruct <code class=code>jdb</code> to run our program; execution begins
at the method <code class=code>QuadraticRoots.main</code> and stops when the first
breakpoint is reached. The <code class=code>run</code> command also causes the <code class=code>jdb</code>
prompt to change to <code class=code>main[1]</code>, which signifies that
our program is the active thread. In line 10, we have used
<code class=code>B hit</code> as an abbreviation for <code class=code>Breakpoint hit</code>
so that the line width would not exceed the width of this page.
In your actual session, you will see the full expansion
<code class=code>Breakpoint hit</code>. <code class=code>QuadraticRoots:18</code> tells us the
breakpoint hit is in line 18 of the class <code class=code>QuadraticRoots</code>.
This must be the line number for the breakpoint we set in session line 4.
In line 11, we ask that the values of
the variables <code class=code>a</code>, <code class=code>b</code>, and <code class=code>c</code>, which are
the formal parameters of <code class=code>outputRoots</code>,
be printed; lines 12-14 shows their values as
printed by <code class=code>jdb</code>. In line 15, we ask that source code lines around
line 20 be listed. This results in lines 16-24 being listed
(<code class=code>jdb</code> lists from 4 lines before to 4 lines after the requested line).
Quite by coincidence, the line numbers of our session
match the source code line numbers that are output.
By examining the output, we see that the first executable line
of <code class=code>outputRoots</code> is numbered 18.
Therefore, our <code class=code>stop</code> request of session line 4 sets a
breakpoint at line 18 of the source code.

<pre>
<code class=code>
 1  c:\codes>jdb applications.QuadraticRoots
 2  Initializing jdb ...
 3  0xae: class(applications.QuadraticRoots)
 4  > stop in QuadraticRoots.outputRoots
 5  Breakpoint set in applications.QuadraticRoots.outputRoots
 6  > run
 7  run applications.QuadraticRoots
 8  running ...
 9  main[1]
10  B hit: applications.QuadraticRoots.outputRoots(QuadraticRoots:18)
11  main[1] print a b c
12     a = 1.0
13     b = -5.0
14     c = 6.0
15  main [1] list 20
16  16             public static void outputRoots(double a, double b,
                                                            double c)
17  17             {
18  18                if (a == 0.0)
19  19                   throw new IllegalArgumentException
20  20    =>                ("QuadraticRoots: Coefficient of x^2 must
                                                        be nonzero");
21  21
22  22                double d = b * b - 4 * a * c;
23  23                if (d > 0) {// two real roots
24  24                            double sqrtd = Math.sqrt(d);
25  main[1] stop at QuadraticRoots:23
26  Breakpoint set at applications.QuadraticRoots:23
27  main[1] stop at QuadraticRoots:25
28  Breakpoint set at applications.QuadraticRoots:25
29  main[1] cont
30  B hit: applications.QuadraticRoots.outputRoots(QuadraticRoots:23)
31  main[1] locals
32     a = 1.0    // 2 output lines omitted
33     b = -5.0
34     c = 6.0
35     d = 1.0
36  main[1] cont
37  B hit: applications.QuadraticRoots.outputRoots(QuadraticRoots:25)
38  main[1] print sqrtd
39  sqrtd = 1.0
40  main[1] quit
</code></pre><br><br>
Knowing what source code lines 22 and 24 are, we decide to set
breakpoints at source code lines 23 and 25 (see session lines 25 and 27).
Line 29 instructs <code class=code>jdb</code> to continue the execution of the program.
Execution continues until the next break point is encountered.
In our case, execution stops just before the execution
of line 23. Line 31 asks that the values of local variables (that are
in scope at this point) be printed, and line 36 instructs <code class=code>jdb</code>
to continue execution until the next breakpoint.
The next breakpoint is encountered at line 25 of the source code.
So, execution stops just after source code line 24 is complete, but before
source code line 25 is started. Line 38 asks that the value of the
variable <code class=code>sqrtd</code> be printed, and line 40 terminates the
<code class=code>jdb</code> session.

</FONT>
</BODY>
</HTML>
