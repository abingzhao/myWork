
<HTML>
<HEAD>
<LINK rel="stylesheet" href="../exer.css">
</HEAD>
<BODY>
<H1>Data Structures & Algorithms</H1>

<H2>Exam 1</H2>
<H2>Sample 3, 75 Minutes</H2>
<BR>
</H1>
Notes:
<ol>
<li>
Write your name, social security number, and section in which you want your
exam returned on each sheet.
<li>
Begin the answer to each question on a new sheet.
</ol>
<br><br>
<ol>
<li>
The class <code class=code>MyList</code>
represents a linear list.
This class has a member class that implements the Java interface
<code class=code>Iterator</code> (recall that
<code class=code>Iterator</code> has the public
methods <code class=code>hasNext</code>, <code class=code>next</code>,
and <code class=code>remove</code>, the <code class=code>remove</code>
method is not required for this problem).
The class <code class=code>MyList</code>
has the public methods
<code class=code>clear()</code> that makes the list <code class=code>this</code>
empty,
<code class=code>append(Object x)</code> that appends <code class=code>x</code>
to the right end of the linear list <code class=code>this</code> and
<code class=code>iterator()</code> that returns an iterator for the
list.
<br><br>
The public static method 
<code class=code>split(MyList a, MyList b, MyList c)</code>
is to be written.
Following an invocation of <code class=code>split</code>,
<code class=code>b</code> has
elements 0, 2, 4, ... of <code class=code>a</code>
(in this order) and <code class=code>c</code> has the remaining elements (in order).
List
<code class=code>a</code> is unchanged.
For example, if
<code class=code>a</code> is
[a, b, c, d, e], then following a split,
<code class=code>a</code>,
<code class=code>b</code> and
<code class=code>c</code> are, respectively,
[a, b, c, d, e],
[a, c, e] and [b, d].
Notice that the split lists 
<code class=code>b</code> and
<code class=code>c</code> may not be empty initially.
<br><br>
<dl compact>
<dt>(a)
<dd>
[8] Write code for the public static method <code class=var>split</code>.
Do not assume the existence of any methods other than those stated above.
<br><br>
<dt>(b)
<dd>
[2] What is the time complexity of your code as a function
of the size of list <code class=code>a</code>?
Explain how you arrived at this complexity.
Assume that each of the methods given above
takes <code class=code>O(1)</code> time.
</dl>
<br><br><br>
<li>
In the class <code class=code>MyArrayList</code>
a linear list is represented using a one-dimensional array
<code class=code>element</code>. The data member <code class=code>size</code>
is such that the list elements are in positions <code class=code>0</code>
through <code class=code>size-1</code> of the array.

The method <code class=var>removeNull</code> (which is a method
of <code class=code>MyArrayList</code>) removes every
<code class=code>null</code> element of the list.
For example, suppose that the list <code class=code>x</code> is
[1, null, 3, null, null, 6] (list size is 6). Then following the
invocation <code class=code>x.removeNull()</code>, the list is
[1, 3, 6] (the size is now 3).
<br><br>
<dl compact>
<dt>(a)
[8] Write code for the member method <code class=var>removeNull</code>.
<em>Do not assume the existence of any methods for</em> <code=class>MyArrayList</code>.
<br><br>
<dt>(b)
[2] What is the time complexity of your code as a function
of the initial list size?
</dl>
<br><br><br>
<li>
Consider the class <code class=var>MyCHList</code>, which is
a singly-linked circular list with header node.
The
data members of this class are <code class=code>headerNode</code> and <code class=code>size</code>.
The data type of
<code class=code>headerNode</code> is <code class=code>MyChainNode</code>.
Objects of type <code class=code>MyChainNode</code> have the data members
<code class=code>element</code> (which is an <code class=code>int</code>)
and <code class=code>next</code> (whose data type is <code class=code>MyChainNode</code>.
<br><br>
Nodes on the circular list are linked together using the field
<code class=code>next</code>.
<code class=code>size</code> is an integer whose value equals the
number of elements in the chain (this count excludes the header node/element).
<br><br>
The value in the
<code class=code>element</code> field of a header node is
<code class=code>INFINITY</code>,
where <code class=code>INFINITY</code> is a constant that
is larger than the value in any
non-header node. Excluding the header, the elements are in ascending
(or more accurately nondecreasing) order left to right.

The method <code class=code>merge(MyCHList a, MyCHList b)</code>
merges the elements in <code class=code>a</code> and <code class=code>b</code>
to yield a sorted circular list with header, which is pointed at by
<code class=code>this.headerNode</code>. Following the merge, the lists
<code class=code>a</code> and <code class=code>b</code> are empty (i.e., they
have only a header node and their size is 0).
<br><br>
If
<code class=code>a</code> and <code class=code>b</code> are initially
[INFINITY, 1, 4, 9] and [INFINITY, 2, 3], then following the merge,
<code class=code>a</code> and <code class=code>b</code> are [INFINITY]
and <code class=code>this</code> is [INFINITY, 1, 2, 3, 4, 9] (note that
INFINITY is the element in the header).
The size of <code class=code>this</code> is 5 and that of
<code class=code>a</code> and <code class=code>b</code> is 0.
<br><br>
<dl compact>
<dt>(a)
<dd>
[12] Write code for the member method <code class=var>merge</code>.
You must not create new nodes. Reuse the nodes of <code class=code>a</code>
and <code class=code>b</code>.
<em>Do not assume the existence of any methods for</em> <code=class>MyCHList</code>.
(Possible Hint: To keep the code short,
use a single loop.)
</dd>
<br><br>
<dt>(b)
<dd>
[2] What is the time complexity of your code as a function
of the length of the resulting chain? Explain how you arrived at this complexity.
</dd>
</dl>
</ol>


<center>
<A href="s3.htm">Solutions</A>

</html>
