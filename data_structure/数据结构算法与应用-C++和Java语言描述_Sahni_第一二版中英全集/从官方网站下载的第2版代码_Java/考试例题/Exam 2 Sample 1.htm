
<HTML>
<HEAD>
<LINK rel="stylesheet" href="../exer.css">
</HEAD>
<BODY>
<H1>Data Structures & Algorithms</H1>

<H2>Exam 2, Sample 1</H2>
<H2>75 Minutes</H2>
<BR>
</H1>
<ol>
<li>
An abbreviated version of the classes
<code class=var>BinaryTreeNode</code> and
<code class=var>LinkedBinaryTree</code>
of the text is given below.
<pre class=code>
<hr class=coderule>
public class BinaryTreeNode
{
   // package visible data members
   Object element;
   BinaryTreeNode leftChild;    // left subtree
   BinaryTreeNode rightChild;   // right subtree
}

public class LinkedBinaryTree
{
   // instance data member
   BinaryTreeNode root;  // root node

   public void swapChildren()
   {
      // code for this method comes here
   }
}
<hr class=coderule>
</pre>
The method <code class=var>swapChildren</code> swaps the
left and right children of every node in the binary tree <code class=code>this</code>.
<dl compact>
<dt>(a)
<dd>
[8]
Write Java code for the method <code class=var>swapChildren</code>.
You may define and implement new private
member methods as needed.
You may not create or delete any nodes or invoke any binary tree methods
not defined in this problem unless you provide code for these methods.
<dt>(b)
<dd>
[2] What is time complexity of your code as a function
of the number of nodes in the binary tree?
</dl>
<br><br>
<li>
A condensed version of the class <code class=var>MinHeap</code>
is given below.
<pre class=code>
<hr class=coderule>
public class MinHeap
{
   // data members
   Comparable [] heap;   // array for complete binary tree
   int size;             // number of elements in heap

   // constructor
   /** create a heap with the given initial capacity */
   public MaxHeap(int initialCapacity)
   {
      if (initialCapacity < 1)
         throw new IllegalArgumentException
            ("initialCapacity must be >= 1");
      heap = new Comparable [initialCapacity + 1];
      size = 0;
   }
   
   /** put theElement into the heap */
   public void put(Comparable theElement)
   {
      // code for this method comes here
   }
}
<hr class=coderule>
</pre>
<dl compact>
<dt>(a)
<dd>
[8]
Write Java code for the <code class=var>put</code>
method.
<dt>(b)
<dd>
[2] What is time complexity of your code as a function
of <clode class=var>size</code>?
</dl>
<br><br>

<li>
<dl compact>
<dt> (a)
<dd>
[3]
The expected performance of chained hash tables is given by the
equations:<br>
<font align = center>
<em class=var>
S <sub>n</sub> = 1 + alpha/2<br>
U <sub>n</sub> = (1 + alpha)/2
</em></font>
<br>
where <em class=var>alpha</em> &gt;= 1 is the loading density
<em class=var>n/b</em>, <em class=var>n</em> is the number
of elements in the table, and <em class=var>b</em> is the number of buckets.
Suppose that the hash function in use is division and that
we expect to have at most
81 elements in the hash table.
What divisor do you recommend using so that
<em class=var>
S <sub>n</sub> &lt;= 4 and
U <sub>n</sub> &lt;= 2
</em>?
<br>
<dt> (b)
<dd>
[3]
Draw a tree that represents a set of elements.  The depth of your tree should be
at least 7.  Show the tree that results following the operation
<code class=var>find(e)</code>, where <code class=var>e</code> is an element
at level 7 and we are using path compaction.
<br>
 <dt> (c)
<dd>
[4]
Suppose you have a binary tree whose data fields are single characters.
When the data fields of the nodes are output in inorder, the output is
<code class=var>ABCDEFGHIJ</code>, and when they are output in postorder,
the output is
<code class=var>BDCAEHGJIF</code>.
Draw the binary tree showing the data in each node and the pointers between
nodes.
</dl>
</ol>


<center>
<A href="s1.htm">Solutions</A>

</html>
