

<HTML>
<HEAD>
<LINK rel="stylesheet" href="../exer.css">
</HEAD>
<BODY>
<H1>Data Structures & Algorithms</H1>

<H2>Exam 2, Sample 2</H2>
<H2>75 Minutes</H2>
<BR>
</H1>
Points allocated to each part are shown in square brackets.
Answers will be graded on correctness as well as efficiency,
elegance, and other measures of quality.
<br><br>
<ol>
<li>
An abbreviated version of the classes
<code class=var>BinaryTreeNode</code> and
<code class=var>LinkedBinaryTree</code>
of the text is given below.
<pre class=code>
<hr class=coderule>
public class BinaryTreeNode
{
   // package visible data members
   Object element;
   BinaryTreeNode leftChild;    // left subtree
   BinaryTreeNode rightChild;   // right subtree
 }  

public class LinkedBinaryTree implements BinaryTree
{
   // instance data member
   BinaryTreeNode root;  // root node
}
<hr class=coderule>
</pre>
You are to write a public method <code class=var>elementAtLevel(int theLevel)</code>
which returns
<code class=code>null</code> if the binary tree has no element at level
<code class=code>theLevel</code>; otherwise, it returns an
element at this level.
<dl compact>
<dt>(a)
<dd>
[16]
Write Java code for the public method <code class=var>elementAtLevel</code>.
You may define and implement additional
methods as needed.
You may not create or delete any nodes or invoke any methods
for which you have not provided code.
(Hint: use recursion.)
<dt>(b)
<dd>
[2] What is the time complexity of your code as a function
of the number of nodes in the binary tree?
</dl>
<br><br>
<li>
There are eight players named <code class=code>a</code> through
<code class=code>h</code> in a tournament. Their values are
[4, 7, 3, 6, 5, 1, 8, 2]. When two players play a match,
the one with smaller value wins.
<dl compact>
<dt>(a)
<dd>
[4] Draw the winner tree for the tournament. Label internal nodes with
player names and external nodes with player values and names.
<dt>(b)
<dd>
[4] Draw the loser tree for the tournament. Label internal nodes with
player names and external nodes with player values and names.
</dl>
<br><br>

<li>
<dl compact>
<dt> (a)
<dd>
[4]
Draw a tree that represents a set of elements.  The depth of your tree should be
at least 7.  The tree need not be one that results from the use of either
the weight or the height rule.
Show the tree that results following the operation
<code class=var>Find(e)</code>, where <code class=var>e</code> is an element
at level 7 and we are using path halving.
<br>
<dt> (b)
<dd>
[8]
Suppose you have a binary tree whose data fields are single characters.
When the data fields of the nodes are output in inorder, the output is
<code class=var>ABCDEFGHIJ</code>, and when they are output in preorder,
the output is
<code class=var>BAHCEDGFJI</code>.
Draw the binary tree showing the data in each node and the pointers between
nodes.
Show the steps used to arrive at the result.
<br>
<dt> (c)
<dd>
[8]
Draw the height biased max leftist tree that results when the height biased
max leftist trees below are
melded by following their rightmost paths (use the strategy
used in the meld algorithm
of the text).
Show the steps used to arrive at the result.
<br><br>
<pre class=figure>
                 60                        70
                /  \                      /  \
               /    \                    /    \
              55    48                  61    54
             /  \  /  \                /  \   / \
           50  52  20  30             58  59  53 45
           /                          /
          40                         56
</pre>
</dl>
</ol>


<center>
<A href="s2.htm">Solutions</A>

</html>
