From: <ÓÉ Windows Internet Explorer 7 ±£´æ>
Subject: 
Date: Sat, 22 Jan 2011 02:41:22 +0800
MIME-Version: 1.0
Content-Type: multipart/related;
	type="text/html";
	boundary="----=_NextPart_000_000A_01CBB9DD.DB3648F0"
X-MimeOLE: Produced By Microsoft MimeOLE V6.00.2900.5994

This is a multi-part message in MIME format.

------=_NextPart_000_000A_01CBB9DD.DB3648F0
Content-Type: text/html;
	charset="utf-8"
Content-Transfer-Encoding: quoted-printable
Content-Location: http://www.mhhe.com/engcs/compsci/sahni/c1/E12.HTM

=EF=BB=BF<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0 Transitional//EN">
<HTML><HEAD>
<META http-equiv=3DContent-Type content=3D"text/html; =
charset=3Dutf-8"><LINK=20
href=3D"http://www.mhhe.com/engcs/compsci/sahni/exer.css" =
rel=3Dstylesheet>
<META content=3D"MSHTML 6.00.6000.17093" name=3DGENERATOR></HEAD>
<BODY>
<H1>Data Structures, Algorithms, &amp; Applications in C++<BR>Chapter 1, =

Exercise 12<BR><BR></H1>The code is given below and in the files <CODE=20
class=3Dcode>curr3.*</CODE>.=20
<HR class=3Dcoderule>
<PRE class=3Dcode>
enum sign {plus, minus};



class Currency {

   friend istream&amp; operator&gt;&gt;(istream&amp; in, Currency&amp; =
x);

   public:

      // constructor

      Currency(sign s =3D plus, unsigned long d =3D 0,

                              unsigned int c =3D 0);

      // destructor

      ~Currency() {}

      Currency operator=3D(int x)

         {amount =3D x;

          return *this;}

      Currency operator=3D(float x)

         {amount =3D (x + 0.001) * 100;

          return *this;}

      sign Sign() const

        {if (amount &lt; 0) return minus;

         else return plus;}

      unsigned long Dollars() const

        {if (amount &lt; 0) return (-amount) / 100;

         else return amount / 100;}

      unsigned int Cents() const

        {if (amount &lt; 0)

            return -amount - Dollars() * 100;

         else return amount - Dollars() * 100;}

      Currency operator+(const Currency&amp; x) const;

      Currency operator-(const Currency&amp; x) const;

      Currency operator%(float x) const;

      Currency operator*(float x) const;

      Currency operator/(float x) const;

      Currency&amp; operator+=3D(const Currency&amp; x)

        {amount +=3D x.amount; return *this;}

      void Output(ostream&amp; out) const;

   private:

      long amount;

};



Currency::Currency(sign s, unsigned long d,

                           unsigned int c)

{// Create a Currency object.

   if (c &gt; 99)

      {// too many cents

       cerr &lt;&lt; "Cents should be &lt; 100" &lt;&lt; endl;

       exit(1);}

  =20

   amount =3D d * 100 + c;

   if (s =3D=3D minus) amount =3D -amount;

}



  =20

Currency Currency::operator+(const Currency&amp; x) const

{// Add x and *this.

   Currency y;

   y.amount =3D amount + x.amount;

   return y;

}



Currency Currency::operator-(const Currency&amp; x) const

{// Subtract x from *this.

   Currency y;

   y.amount =3D amount - x.amount;

   return y;

}



Currency Currency::operator%(float x) const

{// Return x% of *this.

   Currency y;

   y.amount =3D (amount * x) / 100;

   return y;

}



Currency Currency::operator*(float x) const

{// Return x * (*this).

   Currency y;

   y.amount =3D amount * x;

   return y;

}



Currency Currency::operator/(float x) const

{// Return (*this) / x.

   Currency y;

   y.amount =3D amount / x;

   return y;

}



void Currency::Output(ostream&amp; out) const

{// Insert currency value into stream out.

   long a =3D amount;

   if (a &lt; 0) {out &lt;&lt; '-';

               a =3D -a;}

   long d =3D a / 100; // dollars

   out &lt;&lt; '$' &lt;&lt; d &lt;&lt; '.';

   int c =3D a - d * 100; // cents

   if (c &lt; 10) out &lt;&lt; "0";

   out &lt;&lt; c;

}



// overload &lt;&lt;

ostream&amp; operator&lt;&lt;(ostream&amp; out, const Currency&amp; x)

   {x.Output(out); return out;}



// overload &gt;&gt;

istream&amp; operator&gt;&gt;(istream&amp; in, Currency&amp; x)

{// Input a currency amount.



   float y;

   cout &lt;&lt; "Enter the currency amount as "

        &lt;&lt; "a floating point number as in dd.cc or -dd.cc"

        &lt;&lt; endl;



   in &gt;&gt; y;

   x.amount =3D (y + 0.001) * 100;

   return in;

}

<HR class=3Dcoderule>

</PRE></FONT></BODY></HTML>

------=_NextPart_000_000A_01CBB9DD.DB3648F0
Content-Type: text/css;
	charset="gb2312"
Content-Transfer-Encoding: 7bit
Content-Location: http://www.mhhe.com/engcs/compsci/sahni/exer.css

H1 {
	COLOR: red; align: center
}
H2 {
	COLOR: red; align: center
}
H3 {
	COLOR: red; align: center
}
H4 {
	COLOR: red; align: center
}
H5 {
	COLOR: red; align: center
}
H6 {
	COLOR: red; align: center
}
HR {
	COLOR: blue
}
BODY {
	BACKGROUND-COLOR: white
}
.code {
	COLOR: blue
}
.var {
	COLOR: blue
}
.def {
	COLOR: red
}
.figure {
	COLOR: red
}
.coderule {
	COLOR: blue
}

------=_NextPart_000_000A_01CBB9DD.DB3648F0--
